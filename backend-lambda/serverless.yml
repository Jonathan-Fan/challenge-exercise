service: sentral # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs6.10
  memorySize: 256
  timeout: 30

stage: dev
region: us-east-1


# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  create:
    handler: src/activities/handler.create
    events:
      - http:
          path: activities 
          method: POST
  read:
    handler: src/activities/handler.read
    events:
      - http:
          path: activities/{id} 
          method: GET 
  list:
    handler: src/activities/handler.list
    events:
      - http:
          path: activities 
          method: GET 
  update:
    handler: src/activities/handler.update
    events:
      - http:
          path: activities/{id} 
          method: PUT 
  remove:
    handler: src/activities/handler.remove
    events:
      - http:
          path: activities/{id} 
          method: DELETE

plugins:
  - serverless-offline

custom:
  serverless-offline:
    babelOptions:
      presets:
        - env:
            targets:
              node: "6.10"
            exclude:
              - transform-regenerator
            useBuiltIns: true
      plugins:
        - transform-object-rest-spread

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
